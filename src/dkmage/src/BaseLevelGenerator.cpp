/*
 * BaseLevelGenerator.cpp
 *
 */

#include "dkmage/BaseLevelGenerator.h"

#include "adiktedpp/Version.h"

#include "dkmage/Draw.h"

#include "utils/Rect.h"
#include "utils/Rand.h"

#include <cmath>
#include <fstream>


using namespace utils;
using namespace adiktedpp;


namespace dkmage {

    void BaseLevelGenerator::generateLevel() {
        const bool succeed = generateAttempt();
        if ( succeed ) {
            return ;
        }
        if ( parameters.isSet( ParameterName::PN_STOP_ON_FAIL ) ) {
            /// do not attempt to generate
            LOG() << "detected invalid map -- stopping";
            return ;
        }
        LOG() << "detected invalid map -- restarting generation";
        generateLevel();
    }

    bool BaseLevelGenerator::generateAttempt() {
        LOG() << "generating map";

        /// reset/clear script
        map.script.clearData();

        if ( generate() == false ) {
            LOG() << "could not generate map";
            return false;
        }

        std::vector< std::string > content = map.script.build();
        script::LevelScript dataLevel( level );
        dataLevel.rebuild( content );

        const bool extendedScript = map.script.isFXLevel();
        if ( extendedScript ) {
            LOG() << "detected FX script -- txt verification disabled";
        }
        if ( level.verifyMap( false, extendedScript ) == false ) {
            LOG() << "generated level is invalid";
            return false;
        }
        if ( check() == false ) {
            LOG() << "generated map is invalid";
            return false;
        }
        LOG() << "map generated successfully";
        LOG() << "creatures on map: " << level.getRawLevel().countAllCreatures();
        LOG() << "access points number: " << level.getRawLevel().countAccessPoints();
        return true;
    }

    void BaseLevelGenerator::writeIniFile() const {
        const std::string output = level.getRawLevel().outputFileName() + ".mage.ini";

        std::ofstream iniFile;
        iniFile.open( output );

        iniFile << "##\n";
        iniFile << "## map generated by dk-mage ver. " << VERSION_FULL_STRING << "\n";
        iniFile << "##\n";

        iniFile << "\n\n";
        iniFile << "[GENERAL]\n\n";

        const std::set< ParameterName >& localParameters = getLocalParameterNames();
        const std::set< std::string > localNames = getParameterName( localParameters );

        const ParametersMap::Data& rawParameters = parameters.rawData();
        auto iter  = rawParameters.begin();
        auto eiter = rawParameters.end();
        for ( ; iter != eiter; ++iter ) {
            if ( localNames.count( iter->first ) ) {
                /// skip local parameter
                continue ;
            }
            iniFile << iter->first << " = " << iter->second << "\n";
        }

        iniFile.close();
    }

    /// =============================================================================

    void BaseLevelGenerator::generateLeftGoldVein( const std::size_t goldAmount, const std::size_t gemAmount ) {
        const Rect mapRect = raw::RawLevel::mapRect();
        const std::size_t veinDimm = (std::size_t) sqrt( goldAmount ) * 1.5;
        Rect randPosArea( 21, 13 );
        randPosArea.moveLeftTo( 1 + veinDimm / 2 + 1 );
        randPosArea.moveBottomTo( mapRect.max.y - veinDimm / 2 - 1 );
        const std::size_t randomPosIndex = rng_randi( randPosArea.area() );
        const Point center = randPosArea.pointByIndex( randomPosIndex );
        const Rect veinRect( center, veinDimm, veinDimm );
        drawGoldVein( level, veinRect, goldAmount, gemAmount );
    }

    void BaseLevelGenerator::generateRightGoldVein( const std::size_t goldAmount, const std::size_t gemAmount ) {
        const Rect mapRect = raw::RawLevel::mapRect();
        const std::size_t veinDimm = (std::size_t) sqrt( goldAmount ) * 1.5;
        Rect randPosArea( 25, 17 );
        randPosArea.moveRightTo( mapRect.max.x - veinDimm / 2 - 1 );
        randPosArea.moveBottomTo( mapRect.max.y - veinDimm / 2 - 1 );
        const std::size_t randomPosIndex = rng_randi( randPosArea.area() );
        const Point center = randPosArea.pointByIndex( randomPosIndex );
        const Rect veinRect( center, veinDimm, veinDimm );
        drawGoldVein( level, veinRect, goldAmount, gemAmount );
    }

} /* namespace dkmage */
